from aiogram import Bot, Dispatcher, executor
from aiogram.types import Message, CallbackQuery, LabeledPrice
from database import *
from keyboards import *

TOKEN = 'Your telegram bottoken'
PAYMENT = '398062629:TEST:999999999_F91D8F69C042267444B74CC0B3C747757EB0E065' #Instead paste your payment token

bot = Bot(TOKEN)

dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def command_start(message: Message):
    await message.answer(f'–ó–¥–∞–≤—Å—Ç–≤—É–π—Ç–µ {message.from_user.full_name}.\n–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ë–æ—Ç –ê—Ñ–∏–≥–µ–Ω–Ω—ã–π –•–∞–≤—á–∏–∫')

    await authenticated_or_register_user(message)


async def authenticated_or_register_user(message: Message):
    chat_id = message.chat.id
    user = first_select(chat_id)
    if user:  # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
        await message.answer('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ')
        await show_main_menu(message)
    else:  # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ –ø—Ä–æ–π–¥—ë–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        await message.answer('–ü—Ä–æ—Å–∏–º –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ü–æ–¥–µ–ª–∏—Ç—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º',
                             reply_markup=send_contact())


@dp.message_handler(content_types=['contact'])
async def register_user(message: Message):
    chat_id = message.chat.id
    full_name = message.from_user.full_name
    phone = message.contact.phone_number
    try:
        first_register_user(chat_id, full_name, phone)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await create_cart_for_user(message)
        await message.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ')
    except:
        await message.answer('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã')

    await show_main_menu(message)


async def create_cart_for_user(message: Message):
    chat_id = message.chat.id
    try:
        insert_to_cart(chat_id)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    except:
        pass


async def show_main_menu(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', reply_markup=generate_main_menu())


#  @dp.message_handler(regexp='‚úî –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑')
@dp.message_handler(lambda message: '‚úî –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑' in message.text)
async def make_order(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ', reply_markup=generate_category_menu())


@dp.callback_query_handler(lambda call: 'category' in call.data)
async def show_products(call: CallbackQuery):
    chat_id = call.message.chat.id
    _, category_id = call.data.split('_')
    category_id = int(category_id)
    message_id = call.message.message_id  # –ü–æ–ª—É—á–∏–ª–∏ id —Å–æ–æ–±—â–µ–Ω–∏—è

    await bot.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç: ', chat_id, message_id,
                                reply_markup=product_by_category(category_id))


@dp.callback_query_handler(lambda call: 'main_menu' in call.data)
async def return_to_category(call: CallbackQuery):
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ',
                                reply_markup=generate_category_menu())


@dp.callback_query_handler(lambda call: 'product' in call.data)
async def show_detail_product(call: CallbackQuery):
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    _, product_id = call.data.split('_')
    product_id = int(product_id)

    product = get_product_detail(product_id)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å—ë –æ –ø—Ä–æ–¥—É–∫—Ç–µ –ø–æ id –ø—Ä–æ–¥—É–∫—Ç–∞
    print(product)

    await bot.delete_message(chat_id, message_id)
    with open(product[-1], mode='rb') as img:
        await bot.send_photo(chat_id=chat_id, photo=img, caption=f'''{product[2]}

–ò–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç—ã: {product[4]}

–¶–µ–Ω–∞: {product[3]}''', reply_markup=generate_product_detail_menu(product_id=product_id, category_id=product[1]))


@dp.callback_query_handler(lambda call: 'back' in call.data)
async def return_to_category_product(call: CallbackQuery):
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    _, category_id = call.data.split('_')
    await bot.delete_message(chat_id, message_id)
    await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç: ', reply_markup=product_by_category(category_id))


@dp.callback_query_handler(lambda call: 'cart' in call.data)
async def add_product_in_product_cart(call: CallbackQuery):
    chat_id = call.message.chat.id
    _, product_id, quantity = call.data.split('_')
    product_id, quantity = int(product_id), int(quantity)

    cart_id = get_user_cart_id(chat_id)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è id –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ —Ç–≥ id
    product = get_product_detail(product_id)
    print(product)
    final_price = quantity * product[3]

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–µ –≤ –∫–æ—Ä–∑–∏–Ω—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if insert_or_update_cart_products(cart_id, product[2], quantity, final_price):
        await bot.answer_callback_query(call.id, '–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω')
    else:
        await bot.answer_callback_query(call.id, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ')


@dp.message_handler(regexp='üõí –ö–æ—Ä–∑–∏–Ω–∞')
async def show_cart(message: Message, edit_message: bool = False):
    chat_id = message.chat.id
    cart_id = get_user_cart_id(chat_id)

    try:
        update_total_products_total_price(cart_id)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª-–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ —Å—É–º–º—ã –≤ —Ç–∞–±–ª–∏—Ü–µ carts
    except Exception as e:
        print(e)
        await message.answer('–ö–æ—Ä–∑–∏–Ω–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞')
        return

    cart_products = get_cart_products(cart_id)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ —Å—É–º–º—ã
    total_products, total_price = get_total_products_total_price(
        cart_id)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª-–≤–∞ –∏ —Å—É–º–º—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    print(cart_products)
    print(total_products, total_price)

    text = '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞: \n\n'
    i = 0
    for product_name, quantity, final_price in cart_products:
        i += 1
        text += f'''{i}. {product_name}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}
–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {final_price} —Å—É–º–º\n\n'''

    text += f'''–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {0 if total_products is None else total_products}
–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: {0 if total_price is None else total_price}'''

    if edit_message:  # –ï—Å–ª–∏ –ø—Ä–∏–¥—ë—Ç True
        await bot.edit_message_text(text, chat_id, message.message_id, reply_markup=generate_cart_menu(cart_id))
    else:
        await bot.send_message(chat_id, text, reply_markup=generate_cart_menu(cart_id))


@dp.callback_query_handler(lambda call: 'delete' in call.data)
async def delete_cart_product(call: CallbackQuery):
    _, cart_product_id = call.data.split('_')
    cart_product_id = int(cart_product_id)
    message = call.message

    delete_cart_product_from_database(cart_product_id)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
    await show_cart(message, edit_message=True)


@dp.callback_query_handler(lambda call: 'order' in call.data)
async def create_order(call: CallbackQuery):
    chat_id = call.message.chat.id
    _, cart_id = call.data.split('_')
    cart_id = int(cart_id)

    cart_products = get_cart_products(cart_id)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ —Å—É–º–º—ã
    total_products, total_price = get_total_products_total_price(
        cart_id)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª-–≤–∞ –∏ —Å—É–º–º—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    print(cart_products)
    print(total_products, total_price)

    text = '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞: \n\n'
    i = 0
    for product_name, quantity, final_price in cart_products:
        i += 1
        text += f'''{i}. {product_name}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}
–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {final_price} —Å—É–º–º\n\n'''

    text += f'''–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {0 if total_products is None else total_products}
–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: {0 if total_price is None else total_price}'''

    if total_products is None:
        await bot.answer_callback_query(call.id, '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã')
    else:
        await bot.send_invoice(  # –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
            chat_id=chat_id,
            title=f'–ó–∞–∫–∞–∑ ‚Ññ{cart_id}',
            description=text,
            payload='bot-defined invoice payload',
            provider_token=PAYMENT,
            currency='UZS',
            prices=[
                LabeledPrice(label='–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å', amount=int(total_price * 100)),
                LabeledPrice(label='–î–æ—Å—Ç–∞–≤–∫–∞', amount=1000000)
            ],
            start_parameter='start_parameter'
        )


@dp.pre_checkout_query_handler(lambda query: True)
async def checkout(pre_checkout_query):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True,
                                        error_message='–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—Ä—Ç—É')


@dp.message_handler(content_types=['successful_payment'])
async def get_payment(message: Message):
    chat_id = message.chat.id
    cart_id = get_user_cart_id(chat_id)
    await bot.send_message(chat_id, '–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –ú—ã –≤–∞—Å –∫–∏–Ω—É–ª–∏')
    cart_products = get_cart_products(cart_id)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ —Å—É–º–º—ã
    total_products, total_price = get_total_products_total_price(cart_id)

    save_order_user(cart_id, total_products, total_price)  # –§—É–≥–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    order_id = get_order_id(cart_id)

    for product_name, quantity, final_price in cart_products:
        save_order_products_user(order_id, product_name, quantity, final_price)  # –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∑–∞–∫–∑–∞–∑–∞

    drop_cart_product_default(cart_id)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—â–µ–Ω–∏—è –∫–∞—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è



executor.start_polling(dispatcher=dp)
